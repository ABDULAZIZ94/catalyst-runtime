# Known Bugs:

   - Bug ->go or ->visit causes actions which have Args or CaptureArgs called
     twice when called via ->go or ->visit.

     Test app: http://github.com/bobtfish/catalyst-app-bug-go_chain/tree/master

# Compatibility warnings to add:

  - $self->config should warn as config should only ever be called as a
    class method (TESTS).

# Proposed functionality / feature additions:

## Log setup needs to be less lame

So Catalyst::Plugin::Log::* can die
in a fire. Having $c->log_class would be a good start. kane volunteered
to do some of this.

Simple example: Catalyst::Plugin::Log::Colorful should just be a
subclass of Catalyst::Log, no ::Plugin:: needed.

See also: Catalyst::Plugin::Log::Dispatch and
http://github.com/willert/catalyst-plugin-log4perl-simple/tree

# REFACTORING

##  The horrible hack for plugin setup - replacing it:

 * Have a look at the Devel::REPL BEFORE_PLUGIN stuff
   I wonder if what we need is that combined with plugins-as-roles

## App / ctx split:

  NOTE - these are notes that t0m thought up after doing back compat for
         catalyst_component_class, may be inaccurate, wrong or missing things
         bug mst (at least) to correct before trying more than the first 2
         steps. Please knock yourself out on the first two however :)

  - Eliminate actions in MyApp from the main test suite
  - Uncomment warning in C::C::register_action_methods, add tests it works
    by mocking out the logging..
  - Remove MyApp @ISA controller (ask metaclass if it has attributes, and if
                                  so you need back compat :/)
  - Make Catalyst::Context, move the per request stuff in there, handles from
    main app class to delegate
  - Make an instance of the app class which is a global variable
  - Make new instance of the context class, not the app class per-request
  - Remove the components as class data, move to instance data on the app
    class (you probably have to do this for _all_ the class data, good luck!)
  - Make it possible for users to spin up different instances of the app class
    (with different config etc each)
  - Profit! (Things like changing the complete app config per vhost, i.e.
    writing a config loader / app class role which dispatches per vhost to
    differently configured apps is piss easy)

## GSOC

### Next large steps:

  - Moving setup_components etc into the container

    - This is so that you can just load the container and get models etc from it,
      without loading Catalyst.

    - Finish moving setup_component
        - $component->COMPONENT() is still called by setup_component
          (should there be a Service::WithCOMPONENT to solve this?)
        - make it a method, not function

    - Break $instance->expand_modules() in setup_components and figure
      out later how to bring it back

    - Move expand_component_module

    - Move locate_components

    - Move contents of setup_components

  - Finished documentation for ::IOC parts.

  - Creating service()-like sugar for component

  - Test cases for extending the container in an application.
    - Using the sugar added in the previous item
    - Test when Model::Foo depends_on Model::Bar

  - Allowing people to change component lifecycles

    - This is done by being able to use an alternate Service class..

      I.E. We currently force everything to do Catalyst/IOC/Service/WithAcceptContext.pm, but
      things without an ACCEPT_CONTEXT could just not bother, and it would be nice to have
      one that cached the object in request scope (i.e. Catalyst::Component::InstancePerContext)
      etc.

      However we need to work out an interface for people to setup / configure this.

### To polish off

  - Document current methods
  - +    $class->container->get_sub_container('model')->make_single_default;
+    $class->container->get_sub_container('view')->make_single_default;
